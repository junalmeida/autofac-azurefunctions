name: "NuGet"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  NUGET_NAME: "Autofac.Extensions.DependencyInjection.AzureFunctions"
  NUGET_SOURCE: "https://api.nuget.org/v3/index.json"
  PACKAGE_PROJECT: "./Autofac.Extensions.DependencyInjection.AzureFunctions/Autofac.Extensions.DependencyInjection.AzureFunctions.csproj"
  BUILD_PLATFORM: "Any CPU"
  BUILD_CONFIGURATION: "Release" 
  SHOULD_PUBLISH: ${{ github.ref == 'refs/heads/master' }}
  PUBLISH_DIR: "${{ github.workspace }}/_publish"
  
jobs:
  build:
    name: "Build"
    runs-on: "ubuntu-latest"
     
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: "Get Commit Date"
        uses: actions/github-script@0.3.0
        id: author-date
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |             
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
            
      - name: "Set Version Number"
        run: |
          echo "::set-env name=VERSION_NUMBER::$(date -d ${{ steps.author-date.outputs.result }} +%Y.%m.%d.%H%M)";
          PACKAGE_VERSION=$(cat "$PACKAGE_PROJECT" | grep -oPm1 "(?<=<PackageVersion>)[^<]+")
          echo "::set-env name=PACKAGE_VERSION::$PACKAGE_VERSION.${{ github.run_number }}";

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.2
        with:
          nuget-version: "latest"
          nuget-api-key: ${{ secrets.NUGET_KEY }}
          nuget-api-key-source: ${{ env.NUGET_SOURCE }}

      - name: NuGet Restore
        run: nuget restore

      - name: Build
        run: msbuild -p:Configuration="$BUILD_CONFIGURATION" -p:Platform="$BUILD_PLATFORM" -m -p:GeneratePackageOnBuild=true -p:OutDir=$PUBLISH_DIR -p:Version=$VERSION_NUMBER -p:AssemblyVersion=$VERSION_NUMBER -p:AssemblyInformationalVersion=$VERSION_NUMBER -p:PackageVersion=$PACKAGE_VERSION -p:GenerateProjectSpecificOutputFolder=true
        
      - name: Publish Package
        id: "publish"
        if: env.SHOULD_PUBLISH == 'true' && success()
        run: |
          for f in $(find $PUBLISH_DIR -name '*.nupkg'); do 
            echo "Pushing $f...";
            nuget push "$f" -NonInteractive -Source "$NUGET_SOURCE";
          done;
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        if: env.SHOULD_PUBLISH == 'true' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: "v${{ env.PACKAGE_VERSION }}"
          release_name: ${{ env.PACKAGE_VERSION }}
          body: |
            Changes in this [Release](https://www.nuget.org/packages/${{ env.NUGET_NAME }}/${{ env.PACKAGE_VERSION }})
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
